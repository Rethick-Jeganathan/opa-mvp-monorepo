services:
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    command: ["redis-server", "--save", "", "--appendonly", "no"]

  localstack:
    image: localstack/localstack:stable
    profiles: [mock]
    environment:
      - SERVICES=s3,sts,iam
      - DEBUG=0
      - AWS_DEFAULT_REGION=us-east-1
    ports:
      - '4566:4566'
    volumes:
      - localstack-data:/var/lib/localstack

  mcp-server:
    build: ./apps/mcp-server
    environment:
      - PORT=9200
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    ports:
      - '9200:9200'
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:9200/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  external-data:
    build: ./apps/external-data
    environment:
      - MCP_URL=http://mcp-server:9200
      - PORT=8080
      - TLS_PORT=8443
    depends_on:
      - mcp-server
    ports:
      - '8080:8080'
      - '8443:8443'
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:8080/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  opa-tfc:
    build: ./apps/opa-tfc
    environment:
      - PORT=9300
    ports:
      - '9300:9300'
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:9300/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  ui:
    build: ./apps/ui
    environment:
      - PORT=7200
      - MCP_URL=http://mcp-server:9200
      - EDP_URL=http://external-data:8080
      - OPA_TFC_URL=http://opa-tfc:9300
      # If you need client-side exposure, add NEXT_PUBLIC_* variants
    depends_on:
      - mcp-server
      - external-data
      - opa-tfc
    ports:
      - '${UI_PORT:-7200}:7200'

volumes:
  localstack-data:
