apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: nsenvmatch
spec:
  crd:
    spec:
      names:
        kind: NsEnvMatch
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package nsenvmatch

        # Static fallback map to avoid "unreachable" messages (MVP)
        fallback_map := {
          "prod": "prod",
          "prod2": "prod",
          "prod3": "prod",
          "dev": "dev",
          "demo": "dev"
        }

        # Extract provider value for a given name, if present and non-empty
        provider_value(results, name) = v {
          some i
          r := results[i]
          r.key == name
          r.error == ""
          v := r.value
          v != ""
        }

        # Desired env: provider value if available, else fallback
        desired_env(name) = v {
          results := external_data({"provider": "ns-env-provider", "keys": [name]})
          v := provider_value(results, name)
        } else = v {
          v := fallback_map[name]
        }

        # Enforce mismatch as explicit deny
        violation[{"msg": msg}] {
          input.review.kind.kind == "Namespace"
          name := input.review.object.metadata.name
          provided := input.review.object.metadata.labels.env
          want := desired_env(name)
          want != ""
          provided != want
          msg := sprintf("namespace %q env label %q does not match external mapping %q", [name, provided, want])
        }
