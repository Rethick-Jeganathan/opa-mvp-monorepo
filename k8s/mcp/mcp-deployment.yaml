apiVersion: v1
kind: Service
metadata:
  name: mcp-server
  namespace: provider-system
  labels:
    app: mcp-server
    owner: mvp
    env: dev
spec:
  ports:
    - port: 9200
      targetPort: 9200
  selector:
    app: mcp-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server
  namespace: provider-system
  labels:
    app: mcp-server
    owner: mvp
    env: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mcp-server
  template:
    metadata:
      labels:
        app: mcp-server
        owner: mvp
        env: dev
    spec:
      containers:
        - name: mcp-server
          image: node:20-alpine
          imagePullPolicy: Always
          command:
            - sh
            - -lc
            - >
              node -e 'const http=require("http");http.createServer((req,res)=>{if(req.url==="/healthz"){res.writeHead(200,{"Content-Type":"application/json"});res.end(JSON.stringify({status:"ok",redis:"ok"}));}else if(req.url.startsWith("/k8s/ns-env/")){const name=decodeURIComponent(req.url.split("/").pop());const v=(name==="prod"||name==="prod2"||name==="prod3")?"prod":((name==="dev"||name==="demo")?"dev":"");res.writeHead(200,{"Content-Type":"application/json"});res.end(JSON.stringify({name:name,value:v}));}else{res.writeHead(200,{"Content-Type":"text/plain"});res.end("ok");}}).listen(9200);'
          ports:
            - containerPort: 9200
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9200
            initialDelaySeconds: 2
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9200
            initialDelaySeconds: 3
            periodSeconds: 10
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 256Mi
